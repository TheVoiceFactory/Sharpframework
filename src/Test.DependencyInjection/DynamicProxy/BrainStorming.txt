public abstract class Result
{
  abstract Boolean Success { get; }
}

public class FamigliaRettili : Result
{
  public String Moglie { get; set; }
  public String Marito { get; set; }
  public String Figlio { get; set; }
  
  public Boolean IsACoccodrillo { get; }
  
  public Boolean IsACoccodrilloMoglie { get; }
  
  public Boolean Failure { get; }
  
  public override Boolean Success get => !Failure;
}

[ Interceptor ( typeof MessageInterceptor.Sender ) ]
public class Pippo
{
  public Boolean Pluto ( params )
  { return true;}

  public FamigliaRettili Paperino ( params )
  { return ... }
}

public class PippoProxy
{
  private Pippo __proxiedObject;
  
  public Boolean Pluto ( params )
  {
    Boolean retVal = __proxiedObject.Pluto ( params );
    MessageInterceptor.Sender ( retVal, params );
    return retVal;
  }

  public FamigliaRettili Paperino ( params )
  {
    FamigliaRettili retVal = __proxiedObject.Parerino ( params );
    MessageInterceptor.Sender ( retVal.Success, params );
    return retVal;
  }
}

public static class MessageInterceptor
{
  public static void Sender ( Boolean result, params )
  {
    if ( result ) <SendMessage> else <raise exception>:
  }
  public static void Sender ( Result result, params )
  {
    if ( result.Success ) <SendMessage> else <raise exception>:
  }
  
  public static void Standard ( delegate, retval/exception, params )
  {
  }
}

------------------------------------------------------------------

public class MyEntity
	: Entity
	, IMyEntity
{
	public Guid Id { get; } // Inherited from Entity...

	public String Name { get; private set; }

	public String Surname { get; private set; }

	public Boolean ChangeName ( String newName )
	{ Name = newName; }

	public Boolean ChangeSurname ( String newSurname )
	{ Surname = newSurname; }
}

// Aggiungo gli attributi
public class MyEntity : IMyEntity
{
	public Guid Id { get; }

	public String Name { get; private set; }

	public String Surname { get; private set; }

	[ EmitInvokedVerbFact ]
	public Boolean ChangeName ( String newName )
	{ Name = newName; }

	[ EmitInvokedVerbFact ]
	public Boolean ChangeSurname ( String newSurname )
	{ Surname = newSurname; }
}

// In conseguenza degli attributi apposti, desidero che Roslyn generi il seguente proxy:
public class MyEntityProxy : IMyEntity
{
	public class InvokedChangeNameFact : InvokedVerbFact
	{
		public readonly String NewName;

		public InvokedChangeNameFact ( String newName ) { NewName = newName; }
	}

	public class InvokedChangeSurnameFact : InvokedVerbFact
	{
		public readonly String NewSurname;

		public InvokedChangeSurnameFact ( String newSurname ) { NewSurname = newSurname; }
	}


	private IMyEntity __proxiedObject;


	// Omissis (Constructors...)


	public static IMyEntity Allocate ( IServiceProvider sp )
		=> new MyEntityProxy ( sp );


	public Guid Id { get => __proxiedObject.Id; }

	public String Name { get => __proxiedObject.Name; }

	public String Surname { get => __proxiedObject.Surname; }

	public Boolean ChangeName ( String newName )
	{
		if ( !__proxiedObject.ChangeName ( newName ) ) return false;
		
		FactManager.Acquire ( new InvokedChangeNameFact ( this ); )

		return true;
	}

	public Boolean ChangeName ( InvokedChangeNameFact changeNameFact )
		=> return ChangeName ( changeNameFact.NewName )

	public Boolean ChangeSurname ( String newSurname )
	{
		if ( !__proxiedObject.ChangeSurname ( newSurname ) ) return false;

		FactManager.Acquire ( new InvokedChangeSurnameFact ( this ); )

		return true;
	}

	public Boolean ChangeSurname ( InvokedChangeSurnameFact changeSurnameFact )
		=> return ChangeSurname ( changeSurnameFact.NewSurname )
}

// Dove
public class Fact
{
	//...
}

public class GuidFact : Fact
{
	public Guid Id { get; }
}

public class InvokedVerbFact : GuidFact
{
}